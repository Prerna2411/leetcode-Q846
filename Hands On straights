#Hands on Straghts
#python code
class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        if len(hand) % groupSize != 0:
            return False
        
        count = Counter(hand)
        sorted_keys = sorted(count.keys())
        
        for key in sorted_keys:
            if count[key] > 0:
                start_count = count[key]
                for i in range(key, key + groupSize):
                    if count[i] < start_count:
                        return False
                    count[i] -= start_count

        return True

#C++ code
class Solution {
public:
    bool isNStraightHand(vector<int>& hand, int groupSize) {
        if(hand.size()% groupSize!=0){
            return false;
        }
        std::unordered_map<int,int>count;
        for(int card:hand){
            count[card]++;
        }
        vector<int> sortedKeys;
        for(auto& pair:count){
            sortedKeys.push_back(pair.first);

        }
        sort(sortedKeys.begin(),sortedKeys.end());

        for(int key:sortedKeys){
            if(count[key]>0){
                int startCount=count[key];
                for(int i=key;i<key+groupSize;i++){
                    if(count[i]<startCount){
                        return false;

                    }
                    count[i]-=startCount;
                }
            }
        }
        return true;
    }
};
